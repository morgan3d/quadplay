GatherGlobalResults
════════════════════════════════════════════════════════════════════════

def draw_globe(pos, radius):
    draw_disk(pos, radius, ∅, HIGHLIGHT_COLOR)
    
    const parallels = 7
    for 0 < p < parallels:
        const θ = 180° (p + 1) / (parallels + 1) 
        draw_arc(pos, xy(1, cos θ) * radius, 12°, 168°, HIGHLIGHT_COLOR)
    
    const meridians = 15
    for m < meridians:
        const ϕ = loop(360° * m / meridians + 1° game_frames, 360°)
        if ϕ < 180°:
            draw_arc(pos, xy(cos ϕ, 1) * radius, 90°, 270°, HIGHLIGHT_COLOR)



def notify_on_personal_bests():
    const lifetime = player.stats.lifetime
    const today = player.stats[today_date_string()]
    
    // Only acknowledge high scores if the player has played enough ever / today
    if player_competitor.score > max(lifetime.best_score, today.best_score) and lifetime.matches ≥ 20:
    
        notify(stats_sprite[0][0], "Best Score", "New ALL-TIME personal best score of " + format_number(player.score, "commas") + " points!")
    
    else if player_competitor.best_freestyle_points > max(lifetime.best_freestyle_points, today.best_freestyle_points) and lifetime.matches ≥ 20:
    
        notify(ability_icon.freestyle, "Best Freestyle", "New ALL-TIME personal best freestyle score of " + format_number(player_competitor.best_freestyle_points, "commas") + " points for " + player_competitor.best_freestyle_text)
    
    else if player_competitor.score > today.best_score and today.matches ≥ 6:
    
        notify(stats_sprite[0][0], "Daily Best Score", "New daily personal best score of " + format_number(player.score, "commas") + " points!")
    
    else if player_competitor.best_freestyle_points > today.best_freestyle_points and today.matches ≥ 6:
    
        notify(ability_icon.freestyle, "Daily Best Freestyle", "New daily personal best freestyle score of " + format_number(player_competitor.best_freestyle_points, "commas") + " points for " + player_competitor.best_freestyle_text)



enter
────────────────────────────────────────────────────────────────────────
player_competitor = make_player_competitor()
push_front(competitor_array, player_competitor)

share_results_with_network(player_competitor)

// End time of GatherGlobalResults mode
end_time = next_global_game_utc_start_time() - INTERMISSION.SECONDS - EARN_XP_SECONDS

if DEBUG.INTERMISSION or DEBUG.EARN_XP:
    end_time = frame_utc_now

notify_on_personal_bests()
    


frame
────────────────────────────────────────────────────────────────────────
const start_time = end_time - GATHER_SECONDS
const τ = min((frame_utc_now - start_time) / GATHER_SECONDS, 100%)

update_network()

set_background(GLOBAL_GAME.BACKGROUND_COLOR)


if (get_conduit_online_status() ≠ "online" or not (conduit and conduit.status == "online")) and not DEBUG.OFFLINE:
    draw_text({
        text: "network " + (conduit and conduit.status),
        font: leaderboard_font,
        pos: xy(½ SCREEN_SIZE.x, 10),
        color: #FC5})
        
draw_text({
    text: "Gathering Global Scores…",
    font: score_font,
    color: HIGHLIGHT_COLOR,
    y_align: "center",
    pos: ½ SCREEN_SIZE + xy(0, 20)})

draw_globe(xy(½ SCREEN_SIZE.x, ½ SCREEN_SIZE.y - 20), 20)

// Make avatars pop up on the bottom of the screen as if they were
// being discovered over the network
const w = 200
const row_size = ⌊w / 20⌋
const N = size(competitor_array)
for i < ⌊max(N, 10) τ⌋:
    if i < N:
        const competitor = competitor_array[i]
        const sprite = competitor.avatar.sprite
        const pos = 20 xy(i mod row_size, -1.5 ⌊i / row_size⌋) + xy(½ SCREEN_SIZE.x - ½ w + 5, SCREEN_SIZE.y - 30)       
        
        if competitor_is_friend(competitor) or competitor == player_competitor:
            // Background
            draw_rect(pos - xy(0, 5), xy(20, 34), competitor.avatar.color, ∅, ∅, -2)
            
            // Drop shadow
            avatar_draw({avatar: competitor.avatar, sprite: sprite, pos: pos + xy(0, 1), override_color: #000})
            
            // Heart
            if competitor ≠ player_competitor:
                draw_text({pos: pos - xy(0, 14), text: "♥", color: #FFF, shadow: #000, font: leaderboard_font})
                            
        avatar_draw({avatar: competitor.avatar, sprite: sprite, pos: pos})

if frame_utc_now ≥ end_time:
    set_mode(Intermission) because "Timer"



    
leave
────────────────────────────────────────────────────────────────────────
if DEBUG_NETWORK_ON_SCREEN:
    if DEBUG.OFFLINE:
        debug_network_status = "DEBUG.OFFLINE"
    else:
        debug_network_status = get_conduit_online_status() + ", " + (if conduit then conduit.status else "∅")

competitor_analyze(competitor_array)
