GatherGlobalResults
════════════════════════════════════════════════════════════════════════

def draw_globe(pos, radius):
    draw_disk(pos, radius, ∅, HIGHLIGHT_COLOR)
    
    const parallels = 7
    for 0 < p < parallels:
        const θ = 180° (p + 1) / (parallels + 1) 
        draw_arc(pos, xy(1, cos θ) * radius, 12°, 168°, HIGHLIGHT_COLOR)
    
    const meridians = 15
    for m < meridians:
        const ϕ = loop(360° * m / meridians + 1° game_frames, 360°)
        if ϕ < 180°:
            draw_arc(pos, xy(cos ϕ, 1) * radius, 90°, 270°, HIGHLIGHT_COLOR)


enter
────────────────────────────────────────────────────────────────────────
remove_all(competitor_array)

player_competitor = make_player_competitor()
push(competitor_array, player_competitor)

share_results_with_network(player_competitor)

// End time of GatherGlobalResults mode
end_time = next_global_game_utc_start_time() - INTERMISSION.SECONDS - EARN_XP_SECONDS

if DEBUG.INTERMISSION or DEBUG.EARN_XP:
    end_time = frame_utc_now
    
if player.score > player.stats[today_date_string()].high_score and player.stats[today_date_string()].high_score > 0:
    if player.score > player.stats.lifetime.high_score:
        notify(∅, "Personal Best", "You just made a new all-time personal best score of " + format_number(player.score, "commas") + " points!")
    else:
        notify(∅, "Daily Best", "You just made a new daily personal best score of " + format_number(player.score, "commas") + " points!")


frame
────────────────────────────────────────────────────────────────────────
if mode_frames == (if DEBUG.INTERMISSION or DEBUG.EARN_XP then 0 else 60):
    // Make some bots to fill out the competitor list if offline or
    // there are too few players. Do this after almost a second so that
    // other players could come in first
    const num_total_competitors = clamp(⌊4 noise(1, local_time().month + local_time().day + local_time().hour)⌋ + random_integer(6, 16), 4, 10)
    insert_bots(competitor_array, num_total_competitors, 5)

const start_time = end_time - GATHER_SECONDS
const τ = min((frame_utc_now - start_time) / GATHER_SECONDS, 100%)

update_network()

set_background(GLOBAL_GAME.BACKGROUND_COLOR)

draw_text({
    text: "Gathering Global Scores…",
    font: score_font,
    color: HIGHLIGHT_COLOR,
    y_align: "center",
    pos: ½ SCREEN_SIZE + xy(0, 20)})

draw_globe(xy(½ SCREEN_SIZE.x, ½ SCREEN_SIZE.y - 20), 20)

// Make avatars pop up on the bottom of the screen as if they were
// being discovered over the network
const w = 200
const row_size = ⌊w / 20⌋
const N = size(competitor_array)
for i < ⌊max(N, 10) τ⌋:
    if i < N:
        const competitor = competitor_array[i]
        const sprite = competitor.avatar.sprite
        const pos = 20 xy(i mod row_size, -1.5 ⌊i / row_size⌋) + xy(½ SCREEN_SIZE.x - ½ w + 5, SCREEN_SIZE.y - 30)       
        
        if competitor_is_friend(competitor) or competitor == player_competitor:
            // Background
            draw_rect(pos - xy(0, 5), xy(20, 34), competitor.avatar.color)
            // Drop shadow
            draw_sprite({sprite: sprite, pos: pos + xy(0, 1), override_color: #000})
            
            // Heart
            if competitor ≠ player_competitor:
                draw_text({pos: pos - xy(0, 14), text: "♥", color: #FFF, shadow: #000, font: leaderboard_font})
                            
        draw_sprite(sprite, pos)

if frame_utc_now ≥ end_time:
    set_mode(Intermission) because "Timer"
    
    
leave
────────────────────────────────────────────────────────────────────────
if DEBUG.OFFLINE:
    debug_network_status = "DEBUG.OFFLINE"
else:
    debug_network_status = get_conduit_online_status() + ", " + (if conduit then conduit.status else "∅")

competitor_analyze(competitor_array)
