/* Utility functions that are not specific to this game */


/* Returns a boolean that is true if the button has just been
   pressed or is on a repeat press this frame, where `button_frames`
   is the value of a gamepad button. */
def button_repeat(button_frames):
    return (
        (button_frames == 1) or 
          (MAX(button_frames - BUTTON_REPEAT.DELAY, 0) mod BUTTON_REPEAT.PERIOD) == 1)



/* For sorting on size(A) */
def size_comparator(A, B):
    return size(A) - size(B)



/* Returns str with str[index] replaced with `replacement` */
def letter_replaced(str, index, replacement):
    return slice(str, 0, index) + replacement + slice(str, index + 1)


    
def draw_arc(pos, radius, start, stop, color):
    const N = 10
    let prev = pos + angle_to_xy(start) * radius
    for i < N:
        const θ = lerp(start, stop, i / (N - 1),)
        const curr = pos + radius * angle_to_xy(θ)
        draw_line(prev, curr, color)
        prev = curr
        


def draw_outlined_sprite(args, outline_color default #000):    
    for i < 2:
        draw_sprite({…args, override_color: outline_color, pos: args.pos + xy(2i - 1, 0)})
        draw_sprite({…args, override_color: outline_color, pos: args.pos + xy(0, 2i - 1)})
    
    draw_sprite(args)


/* Converts an array into an object where each value of the array becomes a key
   that is mapped to value in the resulting object, i.e., a mathematical set. 
   Puts the output in `set` and returns `set`.
   
   
   If `filter` is a string or number, that field of each array value
   is used as the set element.
   
   If `filter` is a function, it is applied to each array to determine 
   the set element.
   
   ∅ elements are skipped.
   */
def array_to_set(array, value default true, set default {}, filter):
    
    const func = type(filter) == "function"
    
    for i < size(array):
        let element = array[i]
        
        if filter ≠ ∅:
            if func:
                element = filter(element)
            else:
                element = element[filter]
            
        if element:
            set[element] = value
            
    return set
    

