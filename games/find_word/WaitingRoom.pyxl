WaitingRoom
════════════════════════════════════════════════════════════════════════

def enter_rotate_mode():
    push_mode(Rotate) because "button"


enter
────────────────────────────────────────────────────────────────────────
assert(game_type == GLOBAL_GAME)
assert(in_waiting_room == true)

// End right when the next game starts so that this player can join
end_time = prev_global_game_utc_start_time() + GLOBAL_PERIOD

assert((end_time - frame_utc_now - 2 < INTERMISSION.SECONDS + GLOBAL_GAME.JOIN_MIN_REMAINING_TIME) or DEBUG.INTERMISSION, 
    "WaitingRoom time should not exceed intermission plus join min time. " +
    "end_time = " + end_time + ", frame_utc_now = " + frame_utc_now + ", " + (end_time - frame_utc_now - 2) + " >= " + (INTERMISSION.SECONDS + GLOBAL_GAME.JOIN_MIN_REMAINING_TIME))

set_background(WAITING_ROOM_BACKGROUND_COLOR)
set_post_effects({color: #CFC, color_blend: "multiply"})
    

frame
────────────────────────────────────────────────────────────────────────

player_update(player, get_board_pos(), ∅, true)

handle_buttons(
    ability_icon.freestyle, "Freestyle", ∅,
    ability_icon.remix, ∅,
    aux_icon.rotate, enter_rotate_mode)

if frame_utc_now ≥ end_time or DEBUG.INTERMISSION:
    in_waiting_room = false
    reset_post_effects()
    set_mode(GenerateBoard) because "GLOBAL start"
