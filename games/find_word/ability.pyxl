/* Manage player abilities. Abilities include messages that appear on leveling up. See also `ABILITY_TABLE` */

todo("Implement boon choice mode")



def ability_load():
    // Erase all abilities on force level. They will be immediately granted by unlock_new_abilities
    const unlocked_ability = if DEBUG.FORCE_LEVEL then {} else (load_local("has_ability") default {})

    // Remove obsolete abilities from the save game
    // that have been removed from the game   
    let removed_any = false
    for key in keys(unlocked_ability):
        if not ABILITY_TABLE[key]:
            removed_any = true
            remove_key(unlocked_ability, key)
    
    if removed_any:
        // Named "has_ability" for historical reasons
        save_local("has_ability", unlocked_ability)
    
    return unlocked_ability



/* Notify of all new abilities, which are each saved when the notification appears. */
def unlock_new_abilities():
    // Look for any abilities that should be unlocked
    for ability at name in ABILITY_TABLE:
        if not contains(name, "TODO") and (not player.unlocked_ability[name] and player.avatar.level ≥ ability.level):
            def grant_ability():

                todo("Custom notification open sounds for NPCs")
                if ability.description ≠ "SILENT":
                    play_sound({sound: award_sound, pitch: 150%})
                    
                player.unlocked_ability[name] = true
                player.has_ability[name] = true

                // Skip saving when debugging intermission
                if DEBUG.INTERMISSION or DEBUG.EARN_XP: return
            
                // Save new abilities (only unlocked_ability is serialized, and
                // called "has_ability" for historical reasons)
                save_local("has_ability", player.unlocked_ability)
                
            
            if ability.description ≠ "SILENT" and not DEBUG.FORCE_LEVEL:
                notify(
                    if ability.sprite_name == "<default>" 
                      then player.avatar.sprite.x_flipped 
                      else evaluate_constant_expression(ability.sprite_name),
                    name, ability.description, grant_ability, ∅, if DEBUG.FORCE_LEVEL then 2 else 8)
            else:
                // Grant the ability immediately because there is no notification
                grant_ability()
