/* 

 - Players connect to the group conduit about 10s before the game ends.
 - At game end they all broadcast their scores, at the start of GatherGlobalResults.
 - Wait for about 3s for all of the results to come in.
 - Show the intermission (staying connected)
 - Disconnect at the end of the intermission

*/

/* The group conduit for exchanging scores. Only used in `game_type` = `GLOBAL_GAME` */
let conduit = ∅


/* Called from `update_player()` and `Freestyle.frame` */
def maybe_connect_to_network():
    if in_waiting_room or game_type ≠ GLOBAL_GAME or DEBUG.OFFLINE or DEBUG.INTERMISSION or DEBUG.ANIMATE_XP:
        return
    
    // Create a stable offset based on the player's name and their first word
    const τ = hash(player.avatar.name + (player.history.list[0] default {text:"x"}).text)
    
    // Delay the connection time for each player so that there is not contention at
    // the signalling server or the broadcast server
    const my_connect_time = end_time - NETWORK.CONNECT_TIME_SECONDS + τ * NETWORK.CONNECT_MAX_DELAY_SECONDS

    // Create the conduit when it is time for this player to connect 
    if not conduit and frame_utc_now > my_connect_time:
        debug_print("Connecting to network")
        conduit = make_conduit()



/* Called from `GatherGlobalResults.enter` */
def share_results_with_network(player_competitor):
    if DEBUG.OFFLINE: return

    if conduit:
        if conduit.status == "online":
            conduit_send(conduit, player_competitor)
        else:
            // We may be offline, or the netid may be
            // having an issue with the signalling server.
            // Reset everything, since this game doesn't need
            // a stable connection. This increases the chance
            // that we can reconnect next match
            conduit = reset_conduits()
    
    

/* Handle incoming network messages. The only messages sent by this
   game are exchanging competitors. */
def _message_handler(message, node_netid, conduit):
    push(competitor_array, message)
    
    

/* Called from `GatherGlobalResults.frame` */
def update_network():
    if conduit:
        conduit_iterate(conduit, _message_handler)


    
/* Called from `GatherGlobalResults.leave` */
def disconnect_from_network():
    if DEBUG.OFFLINE: return

    if conduit and conduit.status == "online":
        conduit = conduit_close(conduit)
    else:
        // We never made a conduit successfully. Reset
        // the entire network system so that it can
        // start fresh next time
        conduit = reset_conduits()
