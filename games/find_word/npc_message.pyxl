/* An npc_message is like a notification, but they are not queued and have
   an auto-cancel condition.
   
   An "NPC" is a bot with a personality who presents as a fictional character,
   vs. one impersonating a human to fill out the leaderboard. */


/* Singleton */
let _npc_message


/* A higher importance message will clear a lower importance one. This allows 
   multiple NPCs to try and comment without overriding anyone. The sound will
   be played the first time that the message is displayed. 
   
   Will close if the user clicks, presses (c), or if
   `auto_close_condition(data, game_frames_since_opened)` is truish */
def set_npc_message(avatar, text, importance default 0, play_sound_args default ∅, max_frames default ∞, auto_close_condition default ∅, data default ∅):
    if not _npc_message or _npc_message.importance < importance:
        _npc_message = {
            avatar: avatar,
            text: text,
            importance: importance,
            play_sound_args: play_sound_args,
            auto_close_condition: auto_close_condition,
            data: data,
            max_frames: max_frames,
            open_game_frames: game_frames}



/* Call to erase the current message. */
def clear_npc_message():
    _npc_message = ∅



/* Hook to render the npc message. */
def npc_message_hook()
& if _npc_message
& preserving_transform
& with avatar, text, open_game_frames, data, max_frames, auto_close_condition in _npc_message:
    
    todo("Animate opening the message")
    todo("Better graphic")
    const message_height = 26
    const history_rect = get_history_rect()
        
    const rect = {corner: xy(0, 0), size: xy(history_rect.size.x, message_height)}
    set_transform(history_rect.corner + xy(0, history_rect.size.y - message_height - 8), ∅, 50)
    
    // Play the message only once
    if _npc_message.play_sound_args:
        play_sound(_npc_message.play_sound_args)
        _npc_message.play_sound_args = ∅
    
    
    // Window
    draw_corner_rect(rect.corner, rect.size, #FFF, #000)
    draw_corner_rect(rect.corner, rect.size, #FFF, #000)
    
    // Avatar
    avatar_draw({avatar: avatar, pos: xy(12, ½ rect.size.y)})
    
    // The message    
    draw_text({
        font: leaderboard_font, 
        pos: xy(24, ½ rect.size.y),
        text: "\"" + text + "\"",
        wrap_width: rect.size.x - 42,
        y_align: "center",
        x_align: "left",
        color: avatar.color})

    // Close prompt
    if player.using_gamepad:
        draw_text({
            font: leaderboard_font,
            pos: rect.size - xy(5, 3),
            text: joy.prompt["(c)"],
            x_align: "right",
            y_align: "bottom",
            color: #333})
        
    if ((touch.a and overlaps(touch.xy, rect)) or 
        joy.pressed_c or 
        (game_frames - open_game_frames ≥ max_frames) or 
        (auto_close_condition and auto_close_condition(data))):
            
        clear_npc_message()
        todo("Animate closing the message")
    
    