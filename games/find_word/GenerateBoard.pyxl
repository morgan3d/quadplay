GenerateBoard
════════════════════════════════════════════════════════════════════════
// This mode generates the board, but also displays an image first
// so that it does not look like the game has locked up when board
// generation runs slowly


enter
────────────────────────────────────────────────────────────────────────
clear_npc_message()

if (player.has_ability["Bovine Boon"] and player.boon_day ≠ today_date_string()) or DEBUG.CHOOSE_BOON:
    push_mode(ChooseBoon)


frame
────────────────────────────────────────────────────────────────────────
set_background(#000)

// Draw on the first few frames (needed in case we're running at low
// frame rate--ensure this is seen). Then, generate the board and go
// to play.

draw_text({
    text: "Generating board…",
    font: score_font,
    color: HIGHLIGHT_COLOR,
    pos: ½ SCREEN_SIZE})
    

if mode_frames > 3:
    // When did the previous game start?
    const prev_start = prev_global_game_utc_start_time()
    
    // Did the previous game finish (i.e., there is no current game)
    const prev_game_finished = frame_utc_now ≥ prev_start + GLOBAL_GAME.PLAY_SECONDS
            
    // Is the next game about to begin? If they are within 2 seconds of the next
    // game just send them to the game a little early, it isn't a huge
    // advantage and avoids any race condition
    const next_game_imminent = frame_utc_now > prev_start + GLOBAL_PERIOD - 2
    
    // How much time is left in the current game?
    const curr_game_remaining_time = max((prev_start + GLOBAL_GAME.PLAY_SECONDS) - frame_utc_now, 0)
    
    /*        
    debug_print(
        "prev_start =", prev_start,
        "\nprev_game_finished =", prev_game_finished,
        "\nnext_game_imminent =", next_game_imminent,
        "\ncurr_game_remaining_time =", curr_game_remaining_time) */
    
    // There is no game currently running because the global game is in 
    // the GameOver state, or about to be so. Send this player to the waiting room
    // so that they aren't bored. 
    in_waiting_room = ((game_type == GLOBAL_GAME and
        (prev_game_finished or curr_game_remaining_time < GLOBAL_GAME.JOIN_MIN_REMAINING_TIME) and
        not next_game_imminent))
        
    const board_string = (
        if DEBUG.BOO then "GHOS BOOT FEAR HALE" else 
        (if not player.has_achievement["Play Solo Match"] then TUTORIAL.FIRST_TIME_BOARD 
        else ∅))
    player_reset_match(player, game_type, board_string)
    
    if DEBUG.INTERMISSION or DEBUG.EARN_XP:
        const n = 60
        for i < n:
            const word = random_value(board.word_list)
            if not player.already_found[word]:
                player_add_to_history(player, word, score_word(word))
                
    if DEBUG.EARN_XP:
        // Force a win
        player.score = 1500
                    
    if in_waiting_room:
        set_mode(WaitingRoom) because "No GLOBAL in progress"
    else:
        set_mode(Play)
    