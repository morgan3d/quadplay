/* Information about other players online (or virtual ones) used by Intermission */

/* 
 
   See `make_competitor()` 
      
   */
const competitor_array = []

let player_competitor

/* Competitors winning each award */
const award_winner = {
    best_word: ∅,
    best_rare: ∅,
    longest: ∅,
    most_words: ∅,
    most_rare_words: ∅}


/*    `word_list` is Q-encoded. `text` values are Q-decoded. */
def make_competitor():
    return {
        /////////////////////////////////////////////////
        // Properties that are immediately overridden on on construction
        avatar: ∅,
        score: 0,
        freestyle_points: 0,
        word_list: [],
        freestyle_word_list: [],
        
        // Evil characters do not give or receive aura
        evil: false,

        /////////////////////////////////////////////////
        // Computed by analyze
        best_word_points: 0,

        best_freestyle_word_points: 0,
        best_freestyle_word_text: "",

        best_wild_word_points: 0,
        best_wild_word_text: "",

        best_rare_points: 0,
        best_rare_text: "",

        rare_word_list: [],
        
        badges: ""}
    
    

/* Are they a friend of the player_competitor */
def competitor_is_friend(competitor):
    todo("Remove when we have a friending UI")
    // For now, friend all humans. Bots have a `base_ability` property
    return ((competitor.avatar.id == BOT.MOO.ID and player.has_ability["Friend of Moo"]) or
            (competitor.avatar.id == BOT.CAF.ID and player.has_ability["Friend of caf"]) or    
            ((competitor ≠ player_competitor) and (player.friends[competitor.avatar.id] or
             competitor.avatar.appears_human or
             not competitor.avatar.bot)))
        


/* Convert the local player into a competitor */
def make_player_competitor():
    const competitor = {
        …make_competitor(),
        avatar: player.avatar,
        score: player.score,
        best_wild_word_points: player.wild_word_points,
        best_wild_word_text: player.wild_word_text}

    for list in [
        [player.history.list, competitor.word_list],
        [player.history.free, competitor.freestyle_word_list]]:
        for entry in list[0]:
            push(list[1], {word: entry.word, points: entry.points})
    
    return competitor



/* Called from `Intermission.enter` */
def competitor_analyze(competitor_array):
    // How many players have each word; used for 
    // identifying rare words
    const count = {}
    
    const empty_template = make_competitor()
    
    // Compute everyone's best results
    for competitor in competitor_array:
        // Competitor data coming in over the network may be from clients that
        // are using an old version and so are missing some fields. Upgrade
        // those.
        for value at field in empty_template:
            if competitor[field] == ∅:
                competitor[field] = clone(value)
        
        // Censor names by slicing off the 2nd letter, if inappropriate,
        // and replacing common letter substitutions to prevent casual
        // looks-like thwarting
        const looks_like = lowercase(replace(competitor.avatar.name, LOOKS_LIKE))
        if offensive[looks_like] or sensitive[looks_like]:
            competitor.avatar.name = competitor.avatar.name[0] + competitor.avatar.name[2] + " "
        
        for prefix in ["", "freestyle_"]:
            for word, points in entry in competitor[prefix + "word_list"]:
                // Increment the count
                count[word] = (count[word] default 0) + 1                
                const text = q_decode(word)
                
                if points > competitor["best_" + prefix + "word_points"]:
                    competitor["best_" + prefix + "word_points"] = points
                    competitor["best_" + prefix + "word_text"]= text
                    
                if size(text) > size(competitor["longest_" + prefix + "text"]):
                    competitor["longest_" + prefix + "text"] = text

                if prefix == "freestyle_":                        
                    competitor.freestyle_points += points            


    // Count at which a word is rare
    const rare_threshold = max(1, ⌊⅙ size(competitor_array)⌋)

    // Find the best rare word for each competitor
    for competitor in competitor_array:          
        for word, points in entry in competitor.word_list:
            if count[word] ≤ rare_threshold:
                // This word has appeared very few times
                push(competitor.rare_word_list, entry)
                
                if points > competitor.best_rare_points:
                    competitor.best_rare_points = points
                    competitor.best_rare_text = q_decode(word)
    
    // Update the history rare fields for the player competitor
    // as these are used for display. We don't need this for others
    for entry in player.history.list:
        if count[entry.word] ≤ rare_threshold:
            entry.rare = true
    
    competitor_assign_awards(competitor_array)


    
/* Helper for `competitor_analyze()`. Sets the `_winner` globals
   and assigns the `competitor.badges` strings. Sorts the competitors
   by score. */
def competitor_assign_awards(competitor_array):
    // Rank all competitors by score
    sort(competitor_array, "score", true)
    
    // Find the winner in each category. Ties are broken
    // by total score by running in order after that sort
    for field in keys(award_winner):
        award_winner[field] = competitor_array[0]
    
    for competitor in competitor_array:
        if competitor.best_word_points > award_winner.best_word.best_word_points:
            award_winner.best_word = competitor
            
        if competitor.best_rare_points > award_winner.best_rare.best_rare_points:
            award_winner.best_rare = competitor

        if size(competitor.longest_text) > size(award_winner.longest.longest_text):
            award_winner.longest= competitor
            
        if size(competitor.word_list) + size(competitor.freestyle_word_list) > size(award_winner.most_words.word_list) + size(award_winner.most_words.freestyle_word_list):
            award_winner.most_words = competitor
            
        if size(competitor.rare_word_list) > size(award_winner.most_rare_words.rare_word_list):
            award_winner.most_rare_words = competitor

    todo("Make data driven")
    // Now loop again and give badges, including for ties:
    for competitor in competitor_array:
        // Put in the same order as the award INTERMISSION.STAGEs
        if competitor.best_word_points == award_winner.best_word.best_word_points:
            competitor.badges += BADGE_TABLE.best_word
        
        if competitor.best_rare_points == award_winner.best_rare.best_rare_points:
            competitor.badges += BADGE_TABLE.best_rare

        if size(competitor.longest_text) == size(award_winner.longest.longest_text):
            competitor.badges += BADGE_TABLE.longest

        if size(competitor.word_list) == size(award_winner.most_words.word_list):
            competitor.badges += BADGE_TABLE.most_words
    
        if size(competitor.rare_word_list) == size(award_winner.most_rare_words.rare_word_list):
            competitor.badges += BADGE_TABLE.most_rare_words
