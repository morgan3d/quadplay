/* Information about other players online (or virtual ones) used by Intermission */

/* 
   ```
   {
        avatar
        text
        badges
        freestyle_points
   
        num_rare
        longest_size
        longest_text
        best_word_points
        best_word_text
        best_wild_word_points
        best_wild_word_text
        best_freestyle_word_points
        best_freestyle_word_text
        best_rare_points
        best_rare_text
        word_list
        freestyle_word_list
        score
    }```
   
   
   `word_list` is Q-encoded. `text` values are Q-decoded.
   
   */
const competitor_array = []

let player_competitor

// Competitors winning each award
let best_word_winner
let best_rare_winner
let longest_winner
let most_words_winner


/* Are they a friend of the player_competitor */
def competitor_is_friend(competitor):
    todo("Remove when we have a friending UI")
    // For now, friend all humans. Bots have a `base_ability` property
    return ((competitor.avatar.id == BOT.MOO.ID and player.has_ability["Friend of Moo"]) or
            (competitor.avatar.id == BOT.CAF.ID and player.has_ability["Friend of caf"]) or    
            ((competitor ≠ player_competitor) and (player.friends[competitor.avatar.id] or
             competitor.avatar.appears_human or
             not competitor.avatar.bot)))
        


/* Convert the local player into a competitor */
def make_player_competitor():
    const competitor = {
        avatar: player.avatar,
        score: player.score,
        best_wild_word_points: player.wild_word_points,
        best_wild_word_text: player.wild_word_text,
        word_list: [],
        freestyle_list: []}

    for list in [
        [player.history.list, competitor.word_list],
        [player.history.free, competitor.freestyle_list]]:
        for entry in list[0]:
            push(list[1], {word: entry.word, points: entry.points})
    
    return competitor



/* Called from `Intermission.enter` */
def competitor_analyze(competitor_array):
    // How many players have each word; used for 
    // identifying rare words
    const count = {}
    
    // Compute everyone's best results
    for competitor in competitor_array:
        competitor.badges = ""
        
        // Censor names by slicing off the 2nd letter, if inappropriate,
        // and replacing common letter substitutions to prevent casual
        // looks-like thwarting
        if offensive[lowercase(replace(competitor.avatar.name, LOOKS_LIKE))] or sensitive[lowercase(competitor.avatar.name)]:
            competitor.avatar.name = competitor.avatar.name[0] + competitor.avatar.name[2] + " "

        todo("** Separate longest and longest regular for awardnd tracking purposes")
        competitor.best_freestyle_word_points = 0
        competitor.best_freestyle_word_text = ""
        competitor.freestyle_points = 0
        competitor.best_word_points = 0
        competitor.longest_size = 0
        
        for list in [competitor.freestyle_list, competitor.word_list]:
            for word, points in entry in list:
                // Increment the count
                count[word] = (count[word] default 0) + 1
                
                const text = q_decode(word)
                
                // "best word" is solely from regular words
                if list == competitor.word_list:
                    if points > competitor.best_word_points:
                        competitor.best_word_points = points
                        competitor.best_word_text = text
                else:
                    // Freestyle 
                    competitor.freestyle_points += points
            
                if points > competitor.best_freestyle_word_points:
                    competitor.best_freestyle_word_points = points
                    // This will get hidden below if it has wildcards
                    competitor.best_freestyle_word_text = text

                if size(text) > competitor.longest_size:
                    competitor.longest_size = size(text)
                    competitor.longest_text = text

    // Count at which a word is rare
    const rare_threshold = max(1, ⌊⅙ size(competitor_array)⌋)

    // Find the best rare word for each competitor
    for competitor in competitor_array:
    
        competitor.num_rare = 0
        competitor.best_rare_points = 0
        competitor.best_rare_text = ""
    
        for word, points in entry in competitor.word_list:
            if count[word] ≤ rare_threshold:
                // This word has appeared very few times
                ++competitor.num_rare
                
                if points > competitor.best_rare_points:
                    competitor.best_rare_points = points
                    competitor.best_rare_text = q_decode(word)
    
    // Update the history rare fields for the player competitor
    // as these are used for display. We don't need this for others
    for entry in player.history.list:
        if count[entry.word] ≤ rare_threshold:
            entry.rare = true
    
    competitor_assign_awards(competitor_array)


    
/* Helper for `competitor_analyze()`. Sets the `_winner` globals
   and assigns the `competitor.badges` strings. Sorts the competitors
   by score. */
def competitor_assign_awards(competitor_array):
    // Rank all competitors by score
    sort(competitor_array, "score", true)
    
    // Find the winner in each category. Ties are broken
    // by total score by running in order after that sort
    best_word_winner  = competitor_array[0]
    best_rare_winner  = competitor_array[0]
    longest_winner    = competitor_array[0]
    most_words_winner = competitor_array[0]
    
    for competitor in competitor_array:
        if competitor.best_word_points > best_word_winner.best_word_points:
            best_word_winner = competitor
            
        if competitor.best_rare_points > best_rare_winner.best_rare_points:
            best_rare_winner = competitor

        if competitor.longest_size > longest_winner.longest_size:
            longest_winner = competitor
            
        if size(competitor.word_list) > size(most_words_winner.word_list):
            most_words_winner = competitor

    // Now loop again and give badges, including for ties:
    for competitor in competitor_array:
        // Put in the same order as the award INTERMISSION.STAGEs
        if competitor.best_word_points == best_word_winner.best_word_points:
            competitor.badges += BADGE_TABLE.best_word
        
        if competitor.best_rare_points == best_rare_winner.best_rare_points:
            competitor.badges += BADGE_TABLE.best_rare

        if competitor.longest_size == longest_winner.longest_size:
            competitor.badges += BADGE_TABLE.longest

        if size(competitor.word_list) == size(most_words_winner.word_list):
            competitor.badges += BADGE_TABLE.most_words
    
