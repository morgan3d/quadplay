/* Grant this achievement */
def player_achieve(player, name, make_notification default false):
    if not player.has_achievement[name]:
        player.has_achievement[name] = true
        save_local("has_achievement", player.has_achievement)



/* Constructs a new player with an uninitialized board. Loads
   their avatar from local storage or creates a random one.  */
def make_player():
    const stats = stats_load()
        
    return {
        board: make_board(),
        
        // Tiles for the free word construction
        free_row: [],

        stats: stats,
        
        // Q-encoded dictionary of all words this player has ever
        // found
        vocabulary: array_to_set([…stats.lifetime.word_list, …stats[today_date_string()].word_list], 1),
        
        // The words that the Remix ability will find if activated.
        // Updated when the player completes a word. When ∅ the 
        // auto button is not available.        
        remix_list: ∅,
        remix_uses_left: 0,
        // Button position, computed during rendering and then used
        // for score animation
        remix_pos: xy(0,0),
        
        avatar: {…avatar_load(), level: xp_to_level(stats.lifetime.xp + stats[today_date_string()].xp)},
        
        // Maps names of abilities from ABILITY_TABLE to 1 if present.
        // We do this instead of testing the player level so that during playtesting
        // save files don't have to be updated; instead upgrades are sticky
        // and automatically appear on level up retroactively
        has_ability: ability_load(),
        
        has_achievement: load_local("has_achievement") default {},
        
        // Maps player GUIDs to their most recent name.
        // The names are only for debugging.
        friends: load_local("friends") default {},
        
        score: 0,
        
        background_color: BOARD_COLOR,
        
        gamepad: gamepad_array[0],
                        
        // Q-encoded upper case words that have already been found
        // and are represented in history.list. This does NOT include
        // history.free. use `player_already_found()` to test both.
        already_found: {},
        
        // Used for display.
        history: make_history(),
        
        wild_tile: make_tile(WILDCARD_CHARACTER),

        // Needed for stats tracking
        wild_word_points: 0,
        wild_word_text: "",
        
        // Determined by most recent input method.
        // Show button prompts and cursor when using gamepad
        using_gamepad: false,
        
        // Where the cursor is
        cursor_tile_index: xy(0, 0)}



def player_free_contains(player, word):
    return contains(player.history.free, {word: word}, "word")



/* Creates animation going from the selection (if source == "board") or 
   remix button (if source == "Remix") to the last word in the history */
def player_spawn_score_animation(player, source default "board"):
    let target
    
    // Capture the entry at the time of the animation spawn from
    // the history list
    const entry = last_value(player.history.list)

    let letter_array = []
    let start_array = []
    
    if source == "Remix":
        for letter in entry.word:
            push(letter_array, q_decode(letter))
    else:
        for tile_index in player.board.selection:  
            with pos, letter in player.board.tile[tile_index.x][tile_index.y]:
                push(start_array, xy(pos))
                push(letter_array, q_decode(letter))
    
    def callback(frames_left, total_frames):
        // Have to wait a frame for this so that the 
        // target actually gets rendered and assigned a pos first
        if not entry.pos: return
    
        const target = entry.pos + xy(4 size(entry.word), 4)
        
        const α = linstep(total_frames, 0, frames_left)^1.5
        for i < size(letter_array):
            const pos = lerp(if source == "Remix" then player.remix_pos else start_array[i], target, α)
            draw_disk(pos, ½ (TILE.EXTENT - 4) * (1 - α), entry.color, ∅, 9)
            draw_text({font: score_font, x_align: "center", y_align: "center", text: letter_array[i], pos: pos, color: rgba(1, 1, 1, 1 - α³), z: 10})
        
    sequence({callback: callback, frames: HISTORY.POINTS_ANIMATION_FRAMES})



/* Called by the board after changing selection. 
   Returns true if there was a new word. As a side effect,
   plays a sound and sets the state for visualizing the word
   if there is one. */
def player_selection_change_callback(player)
& with board in player:
    
    const word   = board_selected_word(board)
    const points = score_word(word)

    // Reset selection color
    board.selection_color = TILE.CENTER_SELECTED_COLOR
    
    if player.already_found[word]:
        
        // Show that we've already seen this word by
        // finding and emphasizing it
        player_emphasize_history_word(player, word)
        return true

    else if points > 0:
        // Note that words can also be added by the Auto ability
        // implemented in Play.
        
        // Score the word, even without the player releasing their touch
        player.board.selection_color = player_add_to_history(player, word, points)
        player_spawn_score_animation(player)
        play_points_sound(points, last_value(board.selection))    
        
        // Update the auto button's list. Do this after player_add_to_history
        // so that the full word isn't found again
        if player.has_ability["Scry Remixes"] and not in_waiting_room:
            const previously_available = size(player.remix_list)
            player.remix_list = find_short_words_from_selection()            
            if player.remix_uses_left and size(player.remix_list) > 5 and not previously_available:
                delay(play_sound, 5, {sound: remix_recommended_sound, volume: min(70% + 10% size(player.remix_list), 170%)})

        return true



/* Does not update the score. Returns the color */
def player_add_to_free(player, word, points):
    return history_add(player.history, "free", word, points)
    
    

/* Returns the color. Updates the score. Does not verify that the word has
   not been found previously. `word` is Q-encoded */ 
def player_add_to_history(player, word, points):
    if player_free_contains(player, word):
        // This word was made in free mode unnecessarily. Steal it
        // so that it is locked in if they later change the free row
        todo("Animate moving from free list to regular history")
        remove_values(player.history.free, {word: word}, "word")
    
    player.already_found[word] = true
    player.score += points
    return history_add(player.history, "list", word, points)
    


/* Make this q-encoded word that is already in the history 
   appear emphasized for a few frames to make it obvious 
   to the player */
def player_emphasize_history_word(player, word, duration default 30):
    for list in [player.history.list, player.history.free]:
        for entry in list:
            if entry.word == word:
                entry.emphasize_frame = game_frames + duration
                play_sound({sound:select_tile_sound, volume:150%, pitch:40%})
                return
        
    assert(false, "Could not find " + word + " which should already be in history")




/* Also draws button prompts */
def player_draw_score(player, board_pos, time_left)
& with gamepad, board, score in player:
    
    const score_pos = board_pos + xy(+½, -½) * get_board_pixel_size() - xy(18, 16)
    
    let width = 0
    
    if in_waiting_room:
        draw_text({
            pos: score_pos + xy(0, -7),
            font: button_prompt_font,
            text: "WARM UP HERE. THE NEXT\nGLOBAL MATCH STARTS SOON!",
            x_align: "right",
            y_align: "top",
            color: #0F0,
            z: TILE.LETTER_Z})
            
    else:
        let score_text = format_number(score, "commas")

        // Extend the score with the free points, color
        // coded to make it more obvious this is coming
        // from the free points
        if player.has_ability["Freestyle"]:
            let free_score = 0
            for points in entry in player.history.free:
                free_score += points
                
            let free_text = "" + free_score
            
            // Add color markup
            const best_entry = last_value(player.history.free)
            if best_entry:
                free_text = "{color:" + unparse(best_entry.color) + free_text + "}"
                if best_entry.outline:
                    free_text = "{outline:" + unparse(best_entry.outline) + free_text + "}"
                    
            score_text += "+" + free_text
        
        width = draw_text({
            pos: score_pos,
            font: if player.using_gamepad and size(score_text) > 5 then leaderboard_font else score_font,
            text: score_text + " pts",
            color: #FFF,
            markup: true,
            y_align: "center",
            x_align: "right"}).size.x 
    
    // Button prompts (no space during Freestyle mode for this)
    if player.using_gamepad:
        if get_mode() ≠ Freestyle:
            draw_text({
                pos: score_pos + xy(-136, -7),
                font: button_prompt_font,
                text: replace("(a) SELECT" + (if size(board.selection) > 1 then "\n(b) CANCEL" else ""), gamepad.prompt),
                x_align: "left",
                y_align: "top",
                color: #FFF,
                z: TILE.LETTER_Z})
    else if not in_waiting_room:
        // Gamepad prompts go in this space, so only draw the avatar in mouse/touch mode
        const sprite = idle_animate_avatar(player.avatar.sprite, loop(time_left) < ½)
        draw_sprite(if size(player.history.list) mod 2 then sprite else sprite.x_flipped, score_pos - xy(width + 10, 1))
      
        


/*
  Moves the cursor. When there is a selection in progress, restricts
  to within 1 tile of the last selected value. 
 */
def _player_update_cursor(player)
& with cursor_tile_index, board, gamepad in player:

    // Move on discrete input
    const target = cursor_tile_index + gamepad.xy * |sign(gamepad.dxy)|
    
    // Bounds are initially the whole board
    let lo = xy(0, 0)    
    let hi = xy(COLS, ROWS) - 1

    // Constrain movement to adjacent tiles when a selection is active
    const selection = board.selection
    if size(selection) > 0:
        const last = last_value(selection) 
        lo = max(lo, last - 1)
        hi = min(hi, last + 1)
    
    cursor_tile_index = clamp(target, lo, hi)

    // Buttons
    if gamepad.pressed_a:
        if (equivalent(cursor_tile_index, last_value(board.selection)) or
            equivalent(cursor_tile_index, penultimate_value(board.selection))):
            // Remove from selection. Allow this to happen by re-selecting
            // the penultimate or de-selecting the ultimate
            board_deselect_last(board, player)
        else if not contains(board.selection, cursor_tile_index, equivalent):
            // Add to selection
            board_select(board, cursor_tile_index, player)
    
    if gamepad.pressed_b:
        // End selection
        board_deselect_all(board, player)
            


/* Run UI for this player and draw their board */
def player_update(player, board_pos, angle default 0°, allow_selection default false):
    
    maybe_connect_to_network()
    
    // Track most recent UI method
    if touch.pressed_a:
        player.using_gamepad = false
    else if player.gamepad.pressed_a or player.gamepad.pressed_b or player.gamepad.dx or player.gamepad.dy:
        player.using_gamepad = true
    
    if not player.using_gamepad and not touch.a and size(player.board.selection) > 0:
        board_deselect_all(player.board, player)

    // Move the gamepad controlled cursor
    _player_update_cursor(player)
    
    if (touch.released_a or 
    
        // Tap B to cancel selection
        player.gamepad.pressed_b or
        
        // If not selecting, make sure it is empty
        not allow_selection):
        
        board_deselect_all(player.board, player)    

    player_update_board(player, board_pos, angle, allow_selection)

    const time_left = draw_timer(board_pos)
    player_draw_score(player, board_pos, time_left)
    
    history_update(player.history, get_history_rect())
    
    


/* Compute the position of the center of the board based on the screen size */
def get_board_pos():    
    // Our board has some content at the top, so don't switch
    // to portrait until all of the UI will be visible
    if landscape():
        // Landscape. Put at the bottom right (feel "closer" to a right handed mouse player)
        return xy(SCREEN_SIZE.x - ½ get_board_pixel_size().x - 8, ½ SCREEN_SIZE.y + 8)
    else:
        // Portrait. Put at the bottom, centered, unless the screen is not very high
        // Slide up a little on narrow screens so that it is easier to swipe on a phone
        return xy(½ SCREEN_SIZE.x,
            SCREEN_SIZE.y - ½ get_board_pixel_size().y - 18
            - ⅓ max(SCREEN_SIZE.y - (get_board_pixel_size().y + 60), 0))
        


/* Draw the board and manage UI state changes.
 
   `pos`
   : Center of the grid in pixels
 
   `angle`
   : Rotate by this amount
   
   `allow_selection`
   : If true show and permit selection via touch/gamepad
     
*/
def player_update_board(player, pos, angle, allow_selection)
& preserving_transform
& with board, gamepad, background_color in player:
    
    const grid_size = get_board_pixel_size()
    const tile_size = xy(TILE.EXTENT, TILE.EXTENT)
    
    // Make the selection target slightly small to make 
    // it easier to select diagonals without hitting
    // the sides. If this is the first letter, make the
    // selection radius extra large instead
    const selection_size = tile_size + (if size(board.selection) == 0 then -2 else -6)
            
    set_transform(pos)
    set_camera(xy(0, 0), -angle)

    draw_rect(xy(0, 0), grid_size + ¼ TILE.EXTENT, background_color, board.selection_color)
    draw_rect(xy(0, 0), grid_size + ¼ TILE.EXTENT + 2, ∅, board.selection_color)
    draw_rect(xy(0, 0), grid_size + ¼ TILE.EXTENT + 4, ∅, board.selection_color)
    
    // Store store this before selection changes so that the same
    // button can be used to start and end selection
    const cancel_gamepad_selection = gamepad.pressed_b        
    
    // Save the selection color before iteration so that
    // it does not change within a frame, as this is modified
    // based on the value of the word but should be consistent
    // for a single frame.
    const selection_color = board.selection_color
    
    for col at i in board.tile:
        for tile at j in col:
            
            const index = xy(i, j)
            const pos = _index_to_pos(index)
            const is_cursor_tile = player.using_gamepad and player.cursor_tile_index.x == i and player.cursor_tile_index.y == j and get_mode() ≠ Title
            
            tile.pos = transform_ws_to_ss(pos)
            // This is only for touch purposes, not rendering
            const tile_center = {pos: pos, shape: "disk", size: selection_size}

            if allow_selection:
                // Touch selection                
                if touch.a and overlaps(tile_center, touch.xy):
                    player.cursor_tile_index = xy(index)
                    if touch.pressed_a and (size(board.selection) == 0):
                        
                        // Start selection
                        board_select(board, index, player)
                        
                    else if (touch.a and
                            size(board.selection) > 0 and
                            _adjacent(index, last_value(board.selection))):
    
                        if tile.selected:
                            // Undo selection, backtracked
                            if equivalent(index, penultimate_value(board.selection)):
                                board_deselect_last(board, player)
                                
                        else:
                            // Continue selection
                            board_select(board, index, player)
    
            tile_draw(tile, pos, is_cursor_tile, angle, selection_color, tile_size)
            
    
    // Draw the connectors between selected letters
    if size(board.selection) > 1:
        let prev_pos = _index_to_pos(board.selection[0]) 
        for 0 < s < size(board.selection):
            let pos = _index_to_pos(board.selection[s])
            draw_line(prev_pos, pos, selection_color, TILE.CENTER_Z, ¼ TILE.EXTENT)
            prev_pos = pos



/* If `board_space_string` is specified it should be of the form "AAAA BBBB CCCC DDDD" 

   `skip_word_search` = for the title screen, save time on startup and don't bother
   searching for all possible words in the title.
*/
def player_reset_match(player, game_type, board_space_string default ∅, skip_word_search default false):
    assert(not board_space_string or board_space_string[4] == " ", "board_space_string must have rows separated by spaces")
    player.score = 0
    player.background_color = BOARD_COLOR
    remove_all(player.free_row)
    remove_all(player.already_found)
    remove_all(player.history.list)
    remove_all(player.history.free)
    player.history.scroll.offset = xy(0, 0)
    player.history.scroll_history_size = 0
    player.wild_tile.used = false
    player.wild_word_points = 0
    player.wild_word_text = ""
    player.remix_list = ∅
    player.remix_uses_left = (
        if player.has_ability["Remix × 5"] then 5
        else (if player.has_ability["Remix × 4"] then 4
        else (if player.has_ability["Remix × 3"] then 3
        else (if player.has_ability["Remix × 2"] then 2
        else (if player.has_ability["Remix"] then 1 else 0)))))
    
    if board_space_string:   
        for y < ROWS:
            for x < COLS:
                // COLS + 1 = there are spaces in the board_space_string
                player.board.tile[x][y].letter = board_space_string[x + y * (COLS + 1)]
        
        // Collapse out the spaces
        player.board.seed = replace(board_space_string, " ", "")
        player.board.word_list = if skip_word_search then [] else board_string_find_all_words(player.board.seed)
        player.board.word_set = array_to_set(player.board.word_list)
        player.board.word_count = size(player.board.word_list)
    else:
        board_find_good(player.board, game_type)
    


/* Rotates the board and cursor */
def player_rotate_board(player)
& with board, cursor_tile_index in player:
    board_rotate(board)
    cursor_tile_index = xy(COLS - cursor_tile_index.y - 1, cursor_tile_index.x)
    