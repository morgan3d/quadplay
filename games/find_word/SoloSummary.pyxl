SoloSummary
════════════════════════════════════════════════════════════════════════

/* Words *not* found by the local player. Q-decoded. */
let unfound_word_array

/* Q-decoded */
let shown_array

let selection_index = 0

const STATS_BUTTON_INDEX = 1

def update_button(rect):
    draw_rect(rect.pos - xy(0, 1), rect.size, #0F0, #FFF)
    draw_text({
        font: score_font,
        text: "Done",
        outline: #090,
        pos: rect.pos,
        color: #FFF})
        
    if (any_button_press(gamepad_array[0]) or (touch.pressed_a and overlaps(touch.xy, rect))) and mode_frames > 15:
        set_mode(Title) because "Button"
    

enter
────────────────────────────────────────────────────────────────────────
shown_array = []
unfound_word_array = []
for word in player.board.word_list:
    // Do not use anything in player.already_found
    if not offensive[lowercase(word)] and not player.already_found[q_encode(word)]:
        push(unfound_word_array, word)

// Sort from shortest to longest to emphasize impressive words
sort(unfound_word_array, size_comparator)
    
// Now swap some of the other words towards the back so that
// the player also feels like they could have gotten these
if size(unfound_word_array) > 10:
    for i < 3:
        swap(unfound_word_array, random_integer(0, size(unfound_word_array) - 8), size(unfound_word_array) - 1 - random_integer(1, 6))



frame
────────────────────────────────────────────────────────────────────────
draw_text({
    font: giant_score_font,
    text: format_number(player.score, "commas") + "{font:score_font pts}",
    pos: xy(½ SCREEN_SIZE.x, 26),
    y_align: "baseline",
    markup: true,
    color: #FFF})

draw_text({
    font: score_font,
    text: size(player.history.list) + " words found",
    pos: xy(½ SCREEN_SIZE.x, 44),
    y_align: "baseline",
    markup: true,
    color: #FFF})


if mode_frames mod 320 == 60 and size(unfound_word_array) > 0:
    // Choose the next unfound word
    const word = pop(unfound_word_array)
    board_select_word(player.board, word)
    if size(shown_array) > 15:
        remove_all(shown_array)
        push(shown_array, "")
    push(shown_array, word)


const history_rect = {corner: xy(1, 50), size: xy(SCREEN_SIZE.x - 70, SCREEN_SIZE.y - 72)}
history_update(player.history, history_rect)

draw_corner_rect(history_rect.corner + xy(history_rect.size.x + 1, 0), xy(2, history_rect.size.y), #000) 

local:
    const pos = history_rect.corner + xy(history_rect.size.x + 38, 35)
    board_draw_mini(player.board, pos)
    
    for i < size(shown_array) - 1:
        draw_text({pos: pos + xy(0, 32 + 9i), color: #B7A, text: shown_array[i], font: history_font})

update_button({
    pos: xy(½ SCREEN_SIZE.x, SCREEN_SIZE.y - 10),
    size: xy(150, 17)})

if player.has_ability["Stats Tracker"]:
    const region = {pos: xy(16, SCREEN_SIZE.y - 10), size: 10 xy(2, 2), shape: "disk"}
    if touch.hover:
        selection_index = if overlaps(touch.hover, region) then STATS_BUTTON_INDEX else 0
    else if player.using_gamepad:
        selection_index = 0
        draw_text({font: leaderboard_font, pos: region.pos + xy(-12, 4), text: joy.prompt["(q)"], color: #DDD, outline: #000, z: 10})
            
    draw_stats_button(region.pos, selection_index == STATS_BUTTON_INDEX, ½ region.size.x)
    
    if (touch.pressed_a and overlaps(touch.xy, region)) or joy.pressed_q:
        push_mode(DisplayStats) because "Button"
