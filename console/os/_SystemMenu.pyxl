$SystemMenu
════════════════════════════════════════════════════════════════════════

const text_color              = #fff
const selected_color          = #f

const fade_in_frames          = 10
const slide_in_frames         = 9

let choice_array
let choice_index = 0

let old_transform
let old_clip
let old_post_effects
let old_background
let old_mouse
let old_camera

let max_choice_width
let line_height

let font


def close(callback):
    pop_mode(callback)
   

def choose():
    play_sound($acceptUISound)
    const choice = choice_array[choice_index]

    if choice.confirm:
        push_mode($ConfirmDialog, choice)
    else:
        close(choice.callback)

        
def show_online_menu():
    push_mode($OnlineMenu)

    
def set_controls():
    push_mode($ControlsMenu)


def game_credits():
    push_mode($GameCredits)


      
enter(why)
────────────────────────────────────────────────────────────────────────
$pauseAllSounds()
choice_index = 0

old_transform = get_transform()
old_camera = get_camera()
old_clip = get_clip()
old_post_effects = get_post_effects()
old_background = get_background()
old_mouse = device_control("get_mouse_state")
reset_camera()
reset_transform()

device_control("set_mouse_lock", false)
device_control("set_mouse_cursor", "default")

font = $system_font()

reset_post_effects()

choice_array = [{text: "Resume Game", callback: ∅, confirm: false},
               // Insert custom menu choices after "Resume"
               ...$customPauseMenuOptions]

if size($customPauseMenuOptions) < 3 or VIEW_ARRAY[0].size.y > 64:
   // Only add the credits option if there is room
   push(choice_array, {text: "Game Credits", callback: game_credits, confirm: false})

push(choice_array, {text: "Controllers", callback: set_controls, confirm: false})

if not $hideOnlineMenu() and (VIEW_ARRAY[0].size.x == 384 or VIEW_ARRAY[0].size.x == 192):
    push(choice_array, {text: "Online Play", callback: show_online_menu})

push(choice_array, {text: "Restart Game", callback: reset_game, confirm: true})

if $quit_action != "none":
    let target = "System"
    if $quit_action == "launcher":
        target = "quadplay✜"
    else if $quit_action == "reload":
        target = "Browser"
    
    push(choice_array,
         {text: "Quit to " + target,
          callback: quit_game, confirm: true})

max_choice_width = 0

line_height = round(110% font.line_height)
if VIEW_ARRAY[0].size.y <= 64:
    ++line_height

for c in choice_array:
    max_choice_width = max(max_choice_width, text_width(font, c.text))

if why == "controls":
    set_controls()


leave
────────────────────────────────────────────────────────────────────────
set_transform(old_transform)
set_camera(old_camera)
set_clip(old_clip)
set_post_effects(old_post_effects)
set_background(old_background)
device_control("set_mouse_lock", old_mouse.lock)
device_control("set_mouse_cursor", old_mouse.cursor)
$resumeAllSounds()
$resetEmulatorKeyState()


pop_mode(callback) from $ConfirmDialog
────────────────────────────────────────────────────────────────────────
// Return with the callback
if callback: close(callback)


pop_mode() from $GameCredits
────────────────────────────────────────────────────────────────────────
// Return to the main game
pop_mode()


frame
────────────────────────────────────────────────────────────────────────
if mode_frames > fade_in_frames + slide_in_frames + 2:
   for control in gamepad_array:
      if control.pressed_q or control.$pressed_p:
         play_sound($cancelUISound)
         close(∅)
      else if control.pressed_a or control.pressed_b:
         choose()
      else if control.yy:
         const prev = choice_index
         choice_index = clamp(choice_index + control.yy, 0, size(choice_array) - 1)
         play_sound(if prev == choice_index then $denyUISound else $moveUISound)

if mode_frames == fade_in_frames: play_sound($openUISound)

// Draw the paused game shadowed
reset_transform()
draw_previous_mode()

// Draw *at* the near plane, which due to the epsilon z offsets
// guarantees that the menu draws in front of everything from the
// previous mode. This forces us to draw in order, however.
set_transform(xy(0, 0), xy(1, 1), 2048.5, 1)
draw_corner_rect(xy(0, 0), SCREEN_SIZE, rgba(14%, 14%, 14%, 80% clamp((mode_frames + 1) / fade_in_frames, 15%, 100%)))

for view in VIEW_ARRAY:
    // Force the clipping range beyond what the API normally allows
    set_clip(view.corner, view.size, -2047, 4096)
    $clipZ2 = 2049
    
    // Our last menu item is designed to be the longest, so use that
    // to estimate width
    const window_size = round(xy(max_choice_width + 1.5 font.line_height, view.size.y + 2))

    // Animate sliding in of window
    set_transform(view.corner + xy(1 + view.size.x - window_size.x * (50% - clamp(1 - (mode_frames - fade_in_frames) / slide_in_frames, 0%, 100%)), view.size.y / 2), xy(1, 1), 2048.5, 1)

    // Window shadow
    local:
        const P = xy(0, window_size.y / 2);
        const s = window_size.x / 2 - 1
        draw_line(P + xy(-s, 0), P + xy(s, 0), rgba(0, 0, 0, 40%))
        draw_line(P + xy(1 - s, 1), P + xy(s - 1, 1), rgba(0, 0, 0, 15%))

    // Window
    draw_rect(xy(0, 0), window_size, $system_window_background, $system_window_border)

    let y = -line_height * (size(choice_array) - 1) / 2

    // Draw options
    for i < size(choice_array):
        const active      = choice_index == i
        const yOffset     = if active then -1 else 0
        const x           = -(max_choice_width - 0.6 line_height + 1) / 2
        const text        = choice_array[i].text

        const bounds = $draw_system_menu_text({text: text, pos: xy(x, y + yOffset), y_align: "center"}, active)

        // Make active on mouse hover
        if touch.hover and overlaps(touch.hover, bounds) and choice_index != i:
            choice_index = i
            play_sound($moveUISound)
       
        // Touch selection
        if touch.pressed_a and overlaps(touch, bounds):
            choose()
   
        if active: $draw_system_menu_text({text: "✜", pos: xy(x - 40% line_height + 1, y + yOffset), x_align: "right", y_align: "center"}, true)
      
        y += line_height
