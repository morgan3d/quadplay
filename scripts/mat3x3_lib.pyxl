/*
@url quad://scripts/mat3x3_lib.pyxl
@license Copyright 2025, Morgan McGuire. Open source under the [MIT license](https://opensource.org/licenses/MIT)
@summary 3D transformation routines using a `mat3x3` type.

`M[r][c]` is row `r` column `c`. Compatible
with the `MAT3x3_` intrinsics from quadplay. */


/* Create the row-major 3x3 matrix
$\begin{bsmallmatrix}
a & b & c\\
d & e & f\\
g & h & i
\end{bsmallmatrix}$.
*/
def mat3x3(a, b, c, d, e, f, g, h, i):
    return [[a, b, c], [d, e, f], [g, h, i]]

/* The 3x3 identity matrix,
$\begin{bsmallmatrix}
1 & 0 & 0\\
0 & 1 & 0\\
0 & 0 & 1
\end{bsmallmatrix}$.
*/
def mat3x3_identity():
    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]


/* Create a scale matrix. Pass an `xy()` if using
   3x3 matrices for 2D transformations and a number
   or `xyz()` if using for 3D transformations.

   - `S`: number, `xyz()`, or `xy()`.

 */
def mat3x3_scale(S):
    if is_number(S): S = xyz(S, S, S)
    if S.z == nil: S = xyz(S.x, S.y, 1)
    return [[S.x, 0, 0],
            [0, S.y, 0],
            [0, 0, S.z]]


/* Create a yaw rotation matrix that rotates by θ about the y-axis.
   Use for 3D transformations. */
def mat3x3_yaw(θ):
    return [[cos θ,  0,  sin θ],
            [ 0,     1,   0   ],
            [-sin θ, 0,  cos θ]]
           
           
/* Create a pitch rotation matrix that rotates by θ about the x-axis.
   Use for 3D transformations. */
def mat3x3_pitch(θ):
    return [[1,     0,    0  ],
            [0, cos θ, -sin θ],
            [0, sin θ,  cos θ]]


/* Create a roll rotation matrix that rotates by θ about the z-axis.
   Use for 2D and 3D transformations. */
def mat3x3_roll(θ):
    return [[cos θ, -sin θ,  0],
            [sin θ,  cos θ,  0],
            [0,      0,      1]]


/* Multiply 3x3 matrix `M` by `v` and return the result as a new
   vector, or multiply 3x3 matrix `M` by 3x3 matrix `v` and
   return the result as a new matrix.

   - `M`: a `mat3x3()`
   - `v`: a `xyz()` or `mat3x3()`
   - `orthonormalize`: if true, correct any roundoff errors after multiplication
     by snapping the result to the nearest pure rotation matrix or direction
     vector.
*/
def mat3x3_mul(M, v, orthonormalize default false):
    if is_array(v):
        const C = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    
        for i < 3:
            for j < 3:
                for k < 3:
                    C[i][j] = MAD(M[i][k], v[k][j], C[i][j])

        if orthonormalize:
            MAT3x3_ORTHONORMALIZE(C)
        
        return C

    else:
        // Vector
        const result = {x:0, y:0, z:0}
        MAT3x3_MATMUL_XYZ(M, v, result)
        if orthonormalize:
            return direction(v)
        else:
            return result

        

def mat3x3_transpose(M):
    return [[M[0][0], M[1][0], M[2][0]],
            [M[0][1], M[1][1], M[2][1]],
            [M[0][2], M[1][2], M[2][2]]]



/* Computes the rotation matrix that takes `xyz()` direction `A`
   to `xyz()` direction `B` by the shortest path. */
def mat3x3_rotation_between(A, B):
    A = direction(A)
    B = direction(B)
    
    // Axis and angle of rotation
    const axis = cross(A, B)
    const mag = ‖axis‖

    const d = dot(A, B)
    
    if mag ≤ epsilon:
        if d > 0:
            // Vectors are in the same direction
            return mat3x3_identity()
        else:
            // Vectors point in exactly opposite directions
            // 180 degree flip
            return mat3x3_yaw(180°)
    else:
        let angle = asin(mag)
        if d < 0: angle = 180° - angle
        
        // Normalize the axis
        XYZ_DIV(axis, mag, axis)
    
        return mat3x3_from_axis_angle(axis, angle)



/* Rotate by `angle` about `axis`.

   - `axis`: `xyz()`, does not have to be unit length
   - `angle`: number */
def mat3x3_from_axis_angle(axis, angle):

    axis = direction(axis)
    
    // Rodrigues' formula
    const fCos  = cos angle
    const fSin  = sin angle
    const fOneMinusCos = 1 - fCos
    
    const fX2   = axis.x²
    const fY2   = axis.y²
    const fZ2   = axis.z²
    const fXYM  = axis.x * axis.y * fOneMinusCos
    const fXZM  = axis.x * axis.z * fOneMinusCos
    const fYZM  = axis.y * axis.z * fOneMinusCos
    const fXSin = axis.x * fSin
    const fYSin = axis.y * fSin
    const fZSin = axis.z * fSin

    return [[fX2 * fOneMinusCos + fCos, fXYM - fZSin, fXZM + fYSin],
            [fXYM + fZSin, fY2 * fOneMinusCos + fCos, fYZM - fXSin],
            [fXZM - fYSin, fYZM + fXSin, fZ2 * fOneMinusCos + fCos]]


/* Returns `[axis, angle]` of rotation for matrix `M` */
def mat3x3_to_axis_angle(M):
    // 
    // Let (x,y,z) be the unit-length axis and let A be an angle of rotation.
    // The rotation matrix is R = I + sin(A)*P + (1-cos(A))*P^2 (Rodrigues' formula) where
    // I is the identity and
    //
    //       +-        -+
    //   P = |  0 -z +y |
    //       | +z  0 -x |
    //       | -y +x  0 |
    //       +-        -+
    //
    // If A > 0, R represents a counterclockwise rotation about the axis in
    // the sense of looking from the tip of the axis vector towards the
    // origin.  Some algebra will show that
    //
    //   cos(A) = (trace(R)-1)/2  and  R - R^t = 2*sin(A)*P
    //
    // In the event that A = pi, R-R^t = 0 which prevents us from extracting
    // the axis through P.  Instead note that R = I+2*P^2 when A = pi, so
    // P^2 = (R-I)/2.  The diagonal entries of P^2 are x^2-1, y^2-1, and
    // z^2-1.  We can solve these for axis (x,y,z).  Because the angle is pi,
    // it does not matter which sign you choose on the square roots.

    const trace = M[0][0] + M[1][1] + M[2][2]
    const angle = acos(CLAMP(0.5 (trace - 1), -1, 1))  // on [0, PI]
    const rkAxis = xyz(0, 0, 0)
    
    if angle > 0:
        if angle < pi:
            rkAxis.x = M[2][1] - M[1][2]
            rkAxis.y = M[0][2] - M[2][0]
            rkAxis.z = M[1][0] - M[0][1]
        else:
            // angle is PI
            let fHalfInverse

            if M[0][0] >= M[1][1]:
                // r00 >= r11
                if M[0][0] >= M[2][2]:
                    // r00 is maximum diagonal term
                    rkAxis.x = 0.5 sqrt(M[0][0] - M[1][1] - M[2][2] + 1)
                    fHalfInverse = 0.5 / rkAxis.x
                    rkAxis.y = fHalfInverse * M[0][1]
                    rkAxis.z = fHalfInverse * M[0][2]
                else:
                    // r22 is maximum diagonal term
                    rkAxis.z = 0.5 sqrt(M[2][2] - M[0][0] - M[1][1] + 1)
                    fHalfInverse = 0.5 / rkAxis.z
                    rkAxis.x = fHalfInverse * M[0][2]
                    rkAxis.y = fHalfInverse * M[1][2]
            else:
                // r11 > r00
                if M[1][1] >= M[2][2]:
                    // r11 is maximum diagonal term
                    rkAxis.y = 0.5 sqrt(M[1][1] - M[0][0] - M[2][2] + 1)
                    fHalfInverse = 0.5 / rkAxis.y
                    rkAxis.x = fHalfInverse * M[0][1]
                    rkAxis.z = fHalfInverse * M[1][2]
                else:
                    // r22 is maximum diagonal term
                    rkAxis.z = 0.5 sqrt(M[2][2] - M[0][0] - M[1][1] + 1)
                    fHalfInverse = 0.5 / rkAxis.z
                    rkAxis.x = fHalfInverse * M[0][2]
                    rkAxis.y = fHalfInverse * M[1][2]
    else:
        // The angle is 0 and the matrix is the identity.  Any axis will
        // work, so just use the x-axis.
        rkAxis.x = 1.0
        rkAxis.y = 0.0
        rkAxis.z = 0.0
        
    return [direction(rkAxis), angle]
    
